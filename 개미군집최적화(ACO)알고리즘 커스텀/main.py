# 각종 함수들
import numpy as np 
import matplotlib.pyplot as plt
import networkx as nx
import pandas as pd 
import csv
from colony import Colony
from solver import Solver

# 잘못 구현해서 바뀜,,,,ㅎ
NUM_COLS = 103
NUM_ROWS = 90

def C2N(row, col, num_cols):
    return (row - 1) * num_cols + col

def generate_coordinates(num_rows, num_cols):
    coordinates = []
    for i in range(num_rows):
        for j in range(num_cols):
            coordinates.append(np.array([i+1, j+1]))
    return np.array(coordinates)

def create_graph(coordinates, via_nodes, num_cols):
    G = nx.DiGraph()

    for idx, node_i in enumerate(via_nodes):
        G.add_node(idx+1, pos=coordinates[node_i-1])
        
    for idx_i, node_i in enumerate(via_nodes, 1):
        for idx_j, node_j in enumerate(via_nodes, 1):    
            G.add_edge(idx_i, idx_j, weight=np.linalg.norm(N2C(node_i, num_cols) - N2C(node_j, num_cols)))
            G.add_edge(idx_j, idx_i, weight=np.linalg.norm(N2C(node_i, num_cols) - N2C(node_j, num_cols)))  # 대칭을 위해 반대쪽 가장자리 추가

    new_coordinates = {idx+1: coordinates[node-1] for idx, node in enumerate(via_nodes)}
    return G, new_coordinates

def N2C(num, num_cols):
    row = (num - 1) // num_cols + 1
    col = (num - 1) % num_cols + 1
    return np.array([row, col])


def calculate_distance(nodes, num_cols):
    distance = 0
    for edge in nodes:
        node_i, node_j = edge
        distance += np.linalg.norm(N2C(node_i, num_cols) - N2C(node_j, num_cols))
    return distance

selected_coordinates = [[37, 56], [37, 46], [45, 40], [47, 53], [50, 50], [36, 52], [38, 46], [35, 44], [49, 53], [40, 47], [39, 47], [41, 60], [43, 44], [40, 46], [49, 52], [39, 51], [36, 50], [41, 38], [46, 46], [38, 37], [51, 47], [36, 40], [38, 45], [41, 55], [43, 47], [42, 40], [39, 46], [37, 45], [33, 54], [48, 51], [48, 41], [45, 54], [38, 44], [40, 49], [43, 53], [38, 56], [38, 48], [35, 40], [30, 50], [50, 44], [42, 43], [44, 49], [34, 49], [38, 51], [31, 52], [35, 52], [48, 45], [39, 49], [32, 44], [45, 48], [45, 46], [48, 42], [40, 58], [42, 45], [39, 41], [45, 49], [50, 43], [34, 46], [33, 51], [50, 53], [47, 47], [38, 61], [35, 43], [43, 62], [36, 46], [47, 44], [41, 57], [38, 58], [43, 40], [42, 39], [40, 56], [49, 42], [32, 43], [43, 48], [44, 42], [43, 52], [41, 47], [37, 54], [41, 58], [41, 59], [36, 47], [45, 44], [39, 45], [31, 53], [45, 56], [50, 46], [41, 50], [35, 45], [34, 41], [37, 43], [42, 44], [41, 63], [34, 45], [46, 45], [36, 37], [37, 48], [43, 61], [39, 54], [46, 41], [31, 47], [36, 44], [41, 40], [50, 51], [45, 53], [48, 43], [34, 39], [51, 43], [40, 61], [42, 60], [52, 43], [41, 56], [43, 42], [36, 42], [41, 49], [48, 53], [38, 52], [39, 40], [40, 60], [47, 42], [31, 49], [35, 50], [46, 44], [41, 48], [40, 53], [34, 52], [38, 42], [36, 38], [35, 54], [32, 53], [40, 54], [42, 46], [49, 47], [43, 39], [33, 50], [34, 47], [52, 42], [32, 54], [49, 48], [51, 37], [52, 29], [59, 30], [48, 35], [56, 26], [46, 38], [49, 36], [53, 22], [52, 37], [57, 33], [58, 31], [52, 34], [62, 31], [55, 40], [57, 26], [51, 35], [50, 37], [54, 29], [55, 26], [50, 34], [53, 26], [48, 34], [53, 37], [57, 31], [57, 29], [48, 30], [55, 29], [50, 36], [52, 39], [51, 33], [60, 30], [51, 26], [52, 22], [51, 34], [56, 24], [54, 37], [56, 31], [53, 30], [50, 40], [54, 34], [53, 33], [46, 37], [58, 32], [55, 27], [45, 38], [53, 27], [52, 32], [54, 32], [58, 36], [52, 25], [54, 40], [55, 34], [56, 22], [55, 32], [59, 34], [53, 28], [50, 28], [55, 33], [54, 22], [50, 38], [53, 35], [49, 28], [59, 33], [53, 38], [51, 29], [53, 41], [55, 28], [52, 35], [64, 48], [71, 40], [66, 57], [73, 48], [68, 43], [58, 55], [63, 33], [56, 55], [67, 46], [58, 45], [76, 39], [71, 48], [65, 34], [64, 38], [61, 47], [59, 58], [74, 38], [69, 52], [62, 56], [67, 53], [66, 43], [63, 45], [60, 53], [62, 47], [61, 33], [72, 50], [55, 49], [54, 55], [66, 32], [63, 46], [63, 44], [65, 52], [66, 38], [45, 64], [47, 57], [61, 59], [65, 42], [56, 57], [58, 50], [59, 52], [21, 21], [31, 17], [29, 20], [24, 25], [31, 19], [22, 16], [24, 19], [31, 22], [18, 22], [25, 30], [24, 21], [22, 22], [17, 27], [33, 13], [20, 23], [30, 20], [27, 16], [28, 30], [25, 17], [32, 13], [22, 18], [16, 26], [26, 29], [20, 28], [26, 11], [25, 24], [15, 25], [29, 22], [22, 26], [15, 26], [21, 16], [31, 18], [23, 18], [22, 23], [26, 16], [24, 27], [21, 18], [18, 19], [22, 20], [32, 18], [30, 19], [24, 18], [33, 18], [23, 25], [16, 23], [27, 17], [29, 14], [27, 26], [23, 12], [32, 20], [23, 14], [29, 23], [19, 16], [28, 11], [29, 29], [21, 14], [19, 26], [15, 27], [27, 29], [19, 20], [18, 23], [27, 21], [23, 20], [17, 23], [30, 23], [27, 30], [28, 23], [20, 24], [26, 20], [23, 23], [22, 24], [21, 29], [16, 22], [33, 16], [26, 26], [24, 28], [18, 24], [21, 15], [27, 12], [23, 21], [19, 27], [17, 22], [16, 24], [28, 18], [24, 15], [23, 29], [18, 25], [25, 20], [25, 19], [24, 16], [21, 26], [27, 15], [29, 21], [17, 20], [26, 32], [19, 52], [28, 32], [21, 40], [27, 49], [18, 46], [24, 53], [18, 50], [19, 42], [22, 31], [27, 53], [30, 42], [20, 43], [21, 46], [26, 50], [30, 49], [26, 37], [24, 33], [32, 34], [24, 32], [25, 37], [30, 41], [23, 33], [26, 42], [19, 47], [16, 47], [24, 52], [23, 30], [24, 48], [29, 42], [20, 44], [24, 41], [26, 33], [24, 30], [26, 45], [21, 52], [28, 50], [27, 32], [29, 40], [31, 41], [22, 44], [33, 37], [23, 41], [21, 39], [30, 33], [25, 31], [19, 51], [22, 35], [25, 38], [21, 41], [18, 52], [31, 40], [30, 38], [29, 43], [21, 38], [27, 40], [16, 48], [30, 37], [22, 36], [24, 51], [24, 47], [29, 46], [24, 36], [23, 31], [31, 43], [23, 38], [60, 81], [74, 84], [63, 91], [88, 79], [61, 84], [86, 82], [66, 80], [81, 85], [69, 83], [80, 96], [80, 95], [72, 91], [82, 78], [65, 83], [76, 101], [79, 87], [83, 82], [76, 87], [70, 79], [61, 82], [72, 88], [79, 95], [81, 92], [63, 84], [79, 86], [73, 82], [58, 83], [79, 88], [77, 74], [76, 98], [72, 84], [70, 92], [82, 81], [82, 80], [82, 82], [77, 84], [72, 82], [70, 78], [60, 84], [75, 79], [82, 84], [85, 80], [83, 92], [87, 79], [71, 81], [83, 76], [75, 87], [69, 87], [79, 83], [73, 87], [74, 91], [73, 80], [74, 100], [75, 85], [82, 91], [86, 93], [77, 81], [69, 73], [77, 83], [76, 82], [66, 81], [59, 83], [71, 95], [80, 76], [67, 81], [82, 92], [73, 94], [78, 94], [75, 82], [72, 89], [76, 71], [78, 73], [69, 71], [62, 87], [68, 93], [74, 81], [75, 84], [53, 74], [58, 78], [49, 79], [60, 71], [61, 70], [59, 71], [57, 83], [56, 76], [57, 75], [52, 79], [65, 68], [47, 77], [57, 69], [67, 68], [52, 84], [54, 83], [64, 78], [62, 76], [51, 78], [64, 69], [60, 70], [57, 76], [49, 82], [59, 85], [58, 74], [51, 82], [58, 72], [59, 78], [54, 85], [57, 81], [13, 6], [10, 24], [9, 19], [19, 11], [19, 10], [13, 24], [15, 24], [10, 20], [11, 22], [20, 11], [11, 15], [12, 18], [13, 20], [15, 21], [18, 9], [18, 15], [12, 19], [8, 20], [17, 15], [14, 26], [15, 15], [12, 20], [13, 23], [16, 18], [17, 9], [19, 9], [13, 27], [10, 19], [15, 18], [14, 12], [15, 11], [16, 12], [15, 17], [14, 14], [7, 16], [11, 12], [6, 17], [4, 19], [6, 19], [12, 7], [7, 13], [8, 26], [5, 16], [7, 31], [7, 24], [5, 25], [5, 28], [9, 17], [5, 20], [3, 24], [9, 12], [6, 21], [5, 19], [3, 25], [7, 11], [12, 6], [7, 18], [6, 15], [11, 14], [7, 28], [4, 16], [6, 24], [2, 21], [8, 29], [11, 11], [6, 27], [3, 20], [8, 19], [7, 17], [6, 25], [9, 30], [3, 19], [12, 12], [11, 7], [33, 31], [48, 28], [37, 26], [44, 20], [40, 30], [34, 26], [32, 24], [37, 15], [35, 33], [38, 20], [37, 29], [40, 22], [43, 34], [42, 32], [42, 38], [40, 35], [43, 17], [35, 17], [36, 29], [42, 19], [43, 38], [42, 26], [48, 20], [50, 23], [38, 25], [46, 24], [41, 35], [37, 33], [31, 30], [49, 19], [44, 23], [32, 31], [41, 22], [37, 30], [44, 28], [46, 32], [39, 29], [32, 25], [42, 30], [43, 32], [41, 23], [46, 22], [39, 22], [35, 22], [33, 27], [46, 27], [44, 31], [39, 21], [36, 27], [49, 23], [45, 26], [39, 27], [39, 18], [35, 15], [41, 34], [45, 19], [42, 20], [44, 33], [45, 27], [41, 18], [33, 30], [37, 17], [37, 36], [34, 22], [40, 28], [40, 31], [38, 26], [34, 29], [42, 18], [48, 24], [43, 18], [36, 28], [43, 22], [41, 33], [43, 31], [45, 20], [47, 29], [38, 29], [50, 22], [39, 25], [32, 23], [31, 32], [35, 31], [47, 18], [41, 37], [48, 19], [44, 21], [49, 24], [37, 34], [32, 32], [48, 27], [32, 30], [49, 21], [38, 27], [47, 30], [33, 26], [45, 28], [41, 30], [38, 28], [35, 20], [41, 26], [45, 34], [38, 18], [34, 25], [40, 24], [40, 33], [47, 24], [43, 24], [44, 27], [41, 28], [39, 17], [44, 18], [40, 21], [39, 24], [33, 20], [47, 26], [44, 26], [34, 31], [49, 71], [64, 59], [54, 63], [43, 72], [42, 64], [48, 73], [51, 63], [63, 59], [51, 70], [47, 65], [53, 65], [41, 65], [48, 71], [50, 72], [42, 69], [47, 74], [45, 70], [44, 70], [67, 66], [67, 60], [50, 64], [40, 65], [48, 65], [46, 67], [54, 67], [68, 61], [48, 72], [65, 59], [16, 30], [15, 39], [14, 29], [13, 40], [14, 34], [11, 30], [14, 33], [18, 31], [14, 30], [13, 35], [18, 35], [12, 29], [14, 42], [9, 32], [11, 40], [16, 38], [13, 48], [15, 47], [12, 32], [11, 42], [16, 46], [15, 37], [10, 29], [11, 36], [11, 41], [17, 29], [11, 34], [12, 37], [18, 38], [14, 44], [8, 39], [10, 32], [16, 31]]

# 초기 좌표 제공 및 선택된 좌표 제공
coordinates = generate_coordinates(NUM_ROWS, NUM_COLS)
print(len(coordinates))
starting_coordinate_input_x, starting_coordinate_input_y = [42,34]


starting_coordinate = C2N(int(starting_coordinate_input_x), int(starting_coordinate_input_y), NUM_COLS)
print("입력한 출발 지점의 좌표 및 노드: {}, {}".format([int(starting_coordinate_input_x), int(starting_coordinate_input_y)], starting_coordinate))

selected_coordinates = [[42,34]] + selected_coordinates
to_nodes = np.array([C2N(row, col, NUM_COLS) for (row, col) in selected_coordinates])
G, pos = create_graph(coordinates, to_nodes, NUM_COLS)

solver = Solver()
colony = Colony(1, 3)
sales = 2

# start --> 1 은 전체 selected coordinates 또는 node number 중 1번째 index를 의미. 그러니 무조건 1로 두면 됨.
ans = solver.solve(G, colony, sales, start=1, limit=50, opt2=2)

colors = ['black', 'blue', 'green', 'red', 'pink', 'orange']
plt.figure(dpi=300)
_, ax = plt.subplots()
nx.draw_networkx_nodes(G, pos=pos, ax=ax, node_color='red')
nx.draw_networkx_labels(
    G,
    pos=pos,
    labels={i: str(node + 1) for i, node in zip(range(1, len(G.nodes) + 1), to_nodes)},
    font_size=8,
    font_weight="bold",
    font_color="white",
)
for i in range(len(ans)):
    solution = ans[i]
    distance = calculate_distance(solution.path, NUM_COLS)
    print("Path: ", solution.path)
    print(f"{i+1} Solution Distance = {np.round(distance, 4)}")
    path = solution.path
    nx.draw_networkx_edges(G, pos=pos, edgelist=path, arrows=True, edge_color=colors[i], width = len(ans)-i)

plt.xlim(0, NUM_ROWS + 1)
plt.ylim(0, NUM_COLS + 1)
ax.tick_params(left=True, bottom=True, labelleft=True, labelbottom=True)
plt.savefig("graph.png", dpi=500)
plt.show()